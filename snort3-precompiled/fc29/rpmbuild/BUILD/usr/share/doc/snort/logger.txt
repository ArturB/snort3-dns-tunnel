
=== alert_csv


What: output event in csv format

Type: logger

Usage: context

Configuration: 

* bool *alert_csv.file* = false: output to alert_csv.txt instead of stdout
* multi *alert_csv.fields* = timestamp pkt_num proto pkt_gen pkt_len dir src_ap dst_ap rule action: selected fields will be output in given order left to right { action | class | b64_data | dir | dst_addr | dst_ap | dst_port | eth_dst | eth_len | eth_src | eth_type | gid | icmp_code | icmp_id | icmp_seq | icmp_type | iface | ip_id | ip_len | msg | mpls | pkt_gen | pkt_len | pkt_num | priority | proto | rev | rule | seconds | service | sid | src_addr | src_ap | src_port | target | tcp_ack | tcp_flags | tcp_len | tcp_seq | tcp_win | timestamp | tos | ttl | udp_len | vlan }
* int *alert_csv.limit* = 0: set maximum size in MB before rollover (0 is unlimited) { 0:maxSZ }
* string *alert_csv.separator* = , : separate fields with this character sequence

=== alert_fast


What: output event with brief text format

Type: logger

Usage: context

Configuration: 

* bool *alert_fast.file* = false: output to alert_fast.txt instead of stdout
* bool *alert_fast.packet* = false: output packet dump with alert
* int *alert_fast.limit* = 0: set maximum size in MB before rollover (0 is unlimited) { 0:maxSZ }

=== alert_full


What: output event with full packet dump

Type: logger

Usage: context

Configuration: 

* bool *alert_full.file* = false: output to alert_full.txt instead of stdout
* int *alert_full.limit* = 0: set maximum size in MB before rollover (0 is unlimited) { 0:maxSZ }

=== alert_json


What: output event in json format

Type: logger

Usage: context

Configuration: 

* bool *alert_json.file* = false: output to alert_json.txt instead of stdout
* multi *alert_json.fields* = timestamp pkt_num proto pkt_gen pkt_len dir src_ap dst_ap rule action: selected fields will be output in given order left to right { action | class | b64_data | dir | dst_addr | dst_ap | dst_port | eth_dst | eth_len | eth_src | eth_type | gid | icmp_code | icmp_id | icmp_seq | icmp_type | iface | ip_id | ip_len | msg | mpls | pkt_gen | pkt_len | pkt_num | priority | proto | rev | rule | seconds | service | sid | src_addr | src_ap | src_port | target | tcp_ack | tcp_flags | tcp_len | tcp_seq | tcp_win | timestamp | tos | ttl | udp_len | vlan }
* int *alert_json.limit* = 0: set maximum size in MB before rollover (0 is unlimited) { 0:maxSZ }
* string *alert_json.separator* = , : separate fields with this character sequence

=== alert_sfsocket


What: output event over socket

Type: logger

Usage: context

Configuration: 

* string *alert_sfsocket.file*: name of unix socket file
* int *alert_sfsocket.rules[].gid* = 1: rule generator ID { 1:max32 }
* int *alert_sfsocket.rules[].sid* = 1: rule signature ID { 1:max32 }

=== alert_syslog


What: output event to syslog

Type: logger

Usage: context

Configuration: 

* enum *alert_syslog.facility* = auth: part of priority applied to each message { auth | authpriv | daemon | user | local0 | local1 | local2 | local3 | local4 | local5 | local6 | local7 }
* enum *alert_syslog.level* = info: part of priority applied to each message { emerg | alert | crit | err | warning | notice | info | debug }
* multi *alert_syslog.options*: used to open the syslog connection { cons | ndelay | perror | pid }

=== alert_talos


What: output event in Talos alert format

Type: logger

Usage: context

=== alert_unixsock


What: output event over unix socket

Type: logger

Usage: context

=== log_codecs


What: log protocols in packet by layer

Type: logger

Usage: context

Configuration: 

* bool *log_codecs.file* = false: output to log_codecs.txt instead of stdout
* bool *log_codecs.msg* = false: include alert msg

=== log_hext


What: output payload suitable for daq hext

Type: logger

Usage: context

Configuration: 

* bool *log_hext.file* = false: output to log_hext.txt instead of stdout
* bool *log_hext.raw* = false: output all full packets if true, else just TCP payload
* int *log_hext.limit* = 0: set maximum size in MB before rollover (0 is unlimited) { 0:maxSZ }
* int *log_hext.width* = 20: set line width (0 is unlimited) { 0:max32 }

=== log_pcap


What: log packet in pcap format

Type: logger

Usage: context

Configuration: 

* int *log_pcap.limit* = 0: set maximum size in MB before rollover (0 is unlimited) { 0:maxSZ }

=== unified2


What: output event and packet in unified2 format file

Type: logger

Usage: context

Configuration: 

* bool *unified2.legacy_events* = false: generate Snort 2.X style events for barnyard2 compatibility
* int *unified2.limit* = 0: set maximum size in MB before rollover (0 is unlimited) { 0:maxSZ }
* bool *unified2.nostamp* = true: append file creation time to name (in Unix Epoch format)
