* *-?* <option prefix> output matching command line option quick help (same as --help-options) (optional)
* *-A* <mode> set alert mode: none, cmg, or alert_*
* *-B* <mask> obfuscated IP addresses in alerts and packet dumps using CIDR mask
* *-C* print out payloads with character data only (no hex)
* *-c* <conf> use this configuration
* *-D* run Snort in background (daemon) mode
* *-d* dump the Application Layer
* *-e* display the second layer header info
* *-f* turn off fflush() calls after binary log writes
* *-G* <0xid> (same as --logid) (0:65535)
* *-g* <gname> run snort gid as <gname> group (or gid) after initialization
* *-H* make hash tables deterministic
* *-i* <iface>... list of interfaces
* *-k* <mode> checksum mode; default is all (all|noip|notcp|noudp|noicmp|none)
* *-L* <mode> logging mode (none, dump, pcap, or log_*)
* *-l* <logdir> log to this directory instead of current directory
* *-M* log messages to syslog (not alerts)
* *-m* <umask> set the process file mode creation mask (0x000:0x1FF)
* *-n* <count> stop after count packets (0:max53)
* *-O* obfuscate the logged IP addresses
* *-Q* enable inline mode operation
* *-q* quiet mode - Don't show banner and status report
* *-R* <rules> include this rules file in the default policy
* *-r* <pcap>... (same as --pcap-list)
* *-S* <x=v> set config variable x equal to value v
* *-s* <snap> (same as --snaplen); default is 1518 (68:65535)
* *-T* test and report on the current Snort configuration
* *-t* <dir> chroots process to <dir> after initialization
* *-U* use UTC for timestamps
* *-u* <uname> run snort as <uname> or <uid> after initialization
* *-V* (same as --version)
* *-v* be verbose
* *-X* dump the raw packet data starting at the link layer
* *-x* same as --pedantic
* *-y* include year in timestamp in the alert and log files
* *-z* <count> maximum number of packet threads (same as --max-packet-threads); 0 gets the number of CPU cores reported by the system; default is 1 (0:max32)
* *--alert-before-pass* process alert, drop, sdrop, or reject before pass; default is pass before alert, drop,...
* *--bpf* <filter options> are standard BPF options, as seen in TCPDump
* *--c2x* output hex for given char (see also --x2c)
* *--create-pidfile* create PID file, even when not in Daemon mode
* *--daq* <type> select packet acquisition module (default is pcap)
* *--daq-dir* <dir> tell snort where to find desired DAQ
* *--daq-list* list packet acquisition modules available in optional dir, default is static modules only
* *--daq-var* <name=value> specify extra DAQ configuration variable
* *--dirty-pig* don't flush packets on shutdown
* *--dump-builtin-rules* [<module prefix>] output stub rules for selected modules (optional)
* *--dump-dynamic-rules* output stub rules for all loaded rules libraries
* *--dump-defaults* [<module prefix>] output module defaults in Lua format (optional)
* *--dump-version* output the version, the whole version, and only the version
* *--enable-inline-test* enable Inline-Test Mode Operation
* *--gen-msg-map* dump builtin rules in gen-msg.map format for use by other tools
* *--help* list command line options
* *--help-commands* [<module prefix>] output matching commands (optional)
* *--help-config* [<module prefix>] output matching config options (optional)
* *--help-counts* [<module prefix>] output matching peg counts (optional)
* *--help-limits* print the int upper bounds denoted by max*
* *--help-module* <module> output description of given module
* *--help-modules* list all available modules with brief help
* *--help-options* [<option prefix>] output matching command line option quick help (same as -?) (optional)
* *--help-plugins* list all available plugins with brief help
* *--help-signals* dump available control signals
* *--id-offset* offset to add to instance IDs when logging to files (0:65535)
* *--id-subdir* create/use instance subdirectories in logdir instead of instance filename prefix
* *--id-zero* use id prefix / subdirectory even with one packet thread
* *--list-buffers* output available inspection buffers
* *--list-builtin* [<module prefix>] output matching builtin rules (optional)
* *--list-gids* [<module prefix>] output matching generators (optional)
* *--list-modules* [<module type>] list all known modules of given type (optional)
* *--list-plugins* list all known plugins
* *--lua* <chunk> extend/override conf with chunk; may be repeated
* *--logid* <0xid> log Identifier to uniquely id events for multiple snorts (same as -G) (0:65535)
* *--markup* output help in asciidoc compatible format
* *--max-packet-threads* <count> configure maximum number of packet threads (same as -z) (0:max32)
* *--mem-check* like -T but also compile search engines
* *--nostamps* don't include timestamps in log file names
* *--nolock-pidfile* do not try to lock Snort PID file
* *--pause* wait for resume/quit command before processing packets/terminating
* *--parsing-follows-files* parse relative paths from the perspective of the current configuration file
* *--pcap-file* <file> file that contains a list of pcaps to read - read mode is implied
* *--pcap-list* <list> a space separated list of pcaps to read - read mode is implied
* *--pcap-dir* <dir> a directory to recurse to look for pcaps - read mode is implied
* *--pcap-filter* <filter> filter to apply when getting pcaps from file or directory
* *--pcap-loop* <count> read all pcaps <count> times;  0 will read until Snort is terminated (0:max32)
* *--pcap-no-filter* reset to use no filter when getting pcaps from file or directory
* *--pcap-reload* if reading multiple pcaps, reload snort config between pcaps
* *--pcap-show* print a line saying what pcap is currently being read
* *--pedantic* warnings are fatal
* *--plugin-path* <path> where to find plugins
* *--process-all-events* process all action groups
* *--rule* <rules> to be added to configuration; may be repeated
* *--rule-path* <path> where to find rules files
* *--rule-to-hex* output so rule header to stdout for text rule on stdin
* *--rule-to-text* output plain so rule header to stdout for text rule on stdin (specify delimiter or [Snort_SO_Rule] will be used) (16)
* *--run-prefix* <pfx> prepend this to each output file
* *--script-path* <path> to a luajit script or directory containing luajit scripts
* *--show-plugins* list module and plugin versions
* *--skip* <n> skip 1st n packets (0:max53)
* *--snaplen* <snap> set snaplen of packet (same as -s) (68:65535)
* *--stdin-rules* read rules from stdin until EOF or a line starting with END is read
* *--talos* enable Talos inline rule test mode (same as --tweaks talos -Q -q)
* *--treat-drop-as-alert* converts drop, sdrop, and reject rules into alert rules during startup
* *--treat-drop-as-ignore* use drop, sdrop, and reject rules to ignore session traffic when not inline
* *--tweaks* tune configuration
* *--version* show version number (same as -V)
* *--warn-all* enable all warnings
* *--warn-conf* warn about configuration issues
* *--warn-daq* warn about DAQ issues, usually related to mode
* *--warn-flowbits* warn about flowbits that are checked but not set and vice-versa
* *--warn-hosts* warn about host table issues
* *--warn-plugins* warn about issues that prevent plugins from loading
* *--warn-rules* warn about duplicate rules and rule parsing issues
* *--warn-scripts* warn about issues discovered while processing Lua scripts
* *--warn-symbols* warn about unknown symbols in your Lua config
* *--warn-vars* warn about variable definition and usage issues
* *--x2c* output ASCII char for given hex (see also --c2x) (0x00:0xFF)
* *--x2s* output ASCII string for given byte code (see also --x2c)
* *--trace* turn on main loop debug trace
