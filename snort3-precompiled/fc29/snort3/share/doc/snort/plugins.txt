* *codec::arp*: support for address resolution protocol
* *codec::auth*: support for IP authentication header
* *codec::bad_proto*: bad protocol id
* *codec::ciscometadata*: support for cisco metadata
* *codec::erspan2*: support for encapsulated remote switched port analyzer - type 2
* *codec::erspan3*: support for encapsulated remote switched port analyzer - type 3
* *codec::esp*: support for encapsulating security payload
* *codec::eth*: support for ethernet protocol (DLT 1) (DLT 51)
* *codec::fabricpath*: support for fabricpath
* *codec::gre*: support for generic routing encapsulation
* *codec::gtp*: support for general-packet-radio-service tunneling protocol
* *codec::icmp4*: support for Internet control message protocol v4
* *codec::icmp4_ip*: support for IP in ICMPv4
* *codec::icmp6*: support for Internet control message protocol v6
* *codec::icmp6_ip*: support for IP in ICMPv6
* *codec::igmp*: support for Internet group management protocol
* *codec::ipv4*: support for Internet protocol v4 (DLT 228)
* *codec::ipv6*: support for Internet protocol v6 (DLT 229)
* *codec::ipv6_dst_opts*: support for ipv6 destination options
* *codec::ipv6_frag*: support for IPv6 fragment decoding
* *codec::ipv6_hop_opts*: support for IPv6 hop options
* *codec::ipv6_mobility*: support for mobility
* *codec::ipv6_no_next*: sentinel codec
* *codec::ipv6_routing*: support for IPv6 routing extension
* *codec::llc*: support for logical link control
* *codec::mpls*: support for multiprotocol label switching
* *codec::pgm*: support for pragmatic general multicast
* *codec::ppp_encap*: support for point-to-point encapsulation
* *codec::pppoe_disc*: support for point-to-point discovery
* *codec::pppoe_sess*: support for point-to-point session
* *codec::raw*: support for raw IP (DLT 12)
* *codec::tcp*: support for transmission control protocol
* *codec::teredo*: support for teredo
* *codec::trans_bridge*: support for trans-bridging
* *codec::udp*: support for user datagram protocol
* *codec::user*: support for user sessions (DLT 230)
* *codec::vlan*: support for local area network
* *connector::file_connector*: implement the file based connector
* *connector::tcp_connector*: implement the tcp stream connector
* *inspector::appid*: application and service identification
* *inspector::arp_spoof*: detect ARP attacks and anomalies
* *inspector::back_orifice*: back orifice detection
* *inspector::binder*: configure processing based on CIDRs, ports, services, etc.
* *inspector::dce_http_proxy*: dce over http inspection - client to/from proxy
* *inspector::dce_http_server*: dce over http inspection - proxy to/from server
* *inspector::dce_smb*: dce over smb inspection
* *inspector::dce_tcp*: dce over tcp inspection
* *inspector::dce_udp*: dce over udp inspection
* *inspector::dnp3*: dnp3 inspection
* *inspector::dns*: dns inspection
* *inspector::file_id*: configure file identification
* *inspector::file_log*: log file event to file.log
* *inspector::ftp_client*: FTP inspector client module
* *inspector::ftp_data*: FTP data channel handler
* *inspector::ftp_server*: FTP inspector server module
* *inspector::gtp_inspect*: gtp control channel inspection
* *inspector::http2_inspect*: the HTTP/2 inspector
* *inspector::http_inspect*: the new HTTP inspector!
* *inspector::imap*: imap inspection
* *inspector::modbus*: modbus inspection
* *inspector::normalizer*: packet scrubbing for inline mode
* *inspector::packet_capture*: raw packet dumping facility
* *inspector::perf_monitor*: performance monitoring and flow statistics collection
* *inspector::pop*: pop inspection
* *inspector::port_scan*: detect various ip, icmp, tcp, and udp port or protocol scans
* *inspector::reputation*: reputation inspection
* *inspector::rpc_decode*: RPC inspector
* *inspector::sip*: sip inspection
* *inspector::smtp*: smtp inspection
* *inspector::ssh*: ssh inspection
* *inspector::ssl*: ssl inspection
* *inspector::stream*: common flow tracking
* *inspector::stream_file*: stream inspector for file flow tracking and processing
* *inspector::stream_icmp*: stream inspector for ICMP flow tracking
* *inspector::stream_ip*: stream inspector for IP flow tracking and defragmentation
* *inspector::stream_tcp*: stream inspector for TCP flow tracking and stream normalization and reassembly
* *inspector::stream_udp*: stream inspector for UDP flow tracking
* *inspector::stream_user*: stream inspector for user flow tracking and reassembly 
* *inspector::telnet*: telnet inspection and normalization
* *inspector::wizard*: inspector that implements port-independent protocol identification
* *ips_action::react*: send response to client and terminate session
* *ips_action::reject*: terminate session with TCP reset or ICMP unreachable
* *ips_action::rewrite*: overwrite packet contents
* *ips_option::ack*: rule option to match on TCP ack numbers
* *ips_option::appids*: detection option for application ids
* *ips_option::asn1*: rule option for asn1 detection
* *ips_option::base64_data*: set detection cursor to decoded Base64 data
* *ips_option::base64_decode*: rule option to decode base64 data - must be used with base64_data option
* *ips_option::bufferlen*: rule option to check length of current buffer
* *ips_option::byte_extract*: rule option to convert data to an integer variable
* *ips_option::byte_jump*: rule option to move the detection cursor
* *ips_option::byte_math*: rule option to perform mathematical operations on extracted value and a specified value or existing variable
* *ips_option::byte_test*: rule option to convert data to integer and compare
* *ips_option::classtype*: general rule option for rule classification
* *ips_option::content*: payload rule option for basic pattern matching
* *ips_option::cvs*: payload rule option for detecting specific attacks
* *ips_option::dce_iface*: detection option to check dcerpc interface
* *ips_option::dce_opnum*: detection option to check dcerpc operation number
* *ips_option::dce_stub_data*: sets the cursor to dcerpc stub data
* *ips_option::detection_filter*: rule option to require multiple hits before a rule generates an event
* *ips_option::dnp3_data*: sets the cursor to dnp3 data
* *ips_option::dnp3_func*: detection option to check DNP3 function code
* *ips_option::dnp3_ind*: detection option to check DNP3 indicator flags
* *ips_option::dnp3_obj*: detection option to check DNP3 object headers
* *ips_option::dsize*: rule option to test payload size
* *ips_option::file_data*: rule option to set detection cursor to file data
* *ips_option::file_type*: rule option to check file type
* *ips_option::flags*: rule option to test TCP control flags
* *ips_option::flow*: rule option to check session properties
* *ips_option::flowbits*: rule option to set and test arbitrary boolean flags
* *ips_option::fragbits*: rule option to test IP frag flags
* *ips_option::fragoffset*: rule option to test IP frag offset
* *ips_option::gid*: rule option specifying rule generator
* *ips_option::gtp_info*: rule option to check gtp info element
* *ips_option::gtp_type*: rule option to check gtp types
* *ips_option::gtp_version*: rule option to check GTP version
* *ips_option::http2_frame_data*: rule option to see HTTP/2 frame body
* *ips_option::http2_frame_header*: rule option to see 9-octet HTTP/2 frame header
* *ips_option::http_client_body*: rule option to set the detection cursor to the request body
* *ips_option::http_cookie*: rule option to set the detection cursor to the HTTP cookie
* *ips_option::http_header*: rule option to set the detection cursor to the normalized headers
* *ips_option::http_method*: rule option to set the detection cursor to the HTTP request method
* *ips_option::http_raw_body*: rule option to set the detection cursor to the unnormalized message body
* *ips_option::http_raw_cookie*: rule option to set the detection cursor to the unnormalized cookie
* *ips_option::http_raw_header*: rule option to set the detection cursor to the unnormalized headers
* *ips_option::http_raw_request*: rule option to set the detection cursor to the unnormalized request line
* *ips_option::http_raw_status*: rule option to set the detection cursor to the unnormalized status line
* *ips_option::http_raw_trailer*: rule option to set the detection cursor to the unnormalized trailers
* *ips_option::http_raw_uri*: rule option to set the detection cursor to the unnormalized URI
* *ips_option::http_stat_code*: rule option to set the detection cursor to the HTTP status code
* *ips_option::http_stat_msg*: rule option to set the detection cursor to the HTTP status message
* *ips_option::http_trailer*: rule option to set the detection cursor to the normalized trailers
* *ips_option::http_true_ip*: rule option to set the detection cursor to the final client IP address
* *ips_option::http_uri*: rule option to set the detection cursor to the normalized URI buffer
* *ips_option::http_version*: rule option to set the detection cursor to the version buffer
* *ips_option::icmp_id*: rule option to check ICMP ID
* *ips_option::icmp_seq*: rule option to check ICMP sequence number
* *ips_option::icode*: rule option to check ICMP code
* *ips_option::id*: rule option to check the IP ID field
* *ips_option::ip_proto*: rule option to check the IP protocol number
* *ips_option::ipopts*: rule option to check for IP options
* *ips_option::isdataat*: rule option to check for the presence of payload data
* *ips_option::itype*: rule option to check ICMP type
* *ips_option::md5*: payload rule option for hash matching
* *ips_option::metadata*: rule option for conveying arbitrary name, value data within the rule text
* *ips_option::modbus_data*: rule option to set cursor to modbus data
* *ips_option::modbus_func*: rule option to check modbus function code
* *ips_option::modbus_unit*: rule option to check Modbus unit ID
* *ips_option::msg*: rule option summarizing rule purpose output with events
* *ips_option::pcre*: rule option for matching payload data with pcre
* *ips_option::pkt_data*: rule option to set the detection cursor to the normalized packet data
* *ips_option::priority*: rule option for prioritizing events
* *ips_option::raw_data*: rule option to set the detection cursor to the raw packet data
* *ips_option::reference*: rule option to indicate relevant attack identification system
* *ips_option::rem*: rule option to convey an arbitrary comment in the rule body
* *ips_option::replace*: rule option to overwrite payload data; use with rewrite action
* *ips_option::rev*: rule option to indicate current revision of signature
* *ips_option::rpc*: rule option to check SUNRPC CALL parameters
* *ips_option::seq*: rule option to check TCP sequence number
* *ips_option::service*: rule option to specify list of services for grouping rules
* *ips_option::session*: rule option to check user data from TCP sessions
* *ips_option::sha256*: payload rule option for hash matching
* *ips_option::sha512*: payload rule option for hash matching
* *ips_option::sid*: rule option to indicate signature number
* *ips_option::sip_body*: rule option to set the detection cursor to the request body
* *ips_option::sip_header*: rule option to set the detection cursor to the SIP header buffer
* *ips_option::sip_method*: detection option for sip stat code
* *ips_option::sip_stat_code*: detection option for sip stat code
* *ips_option::so*: rule option to call custom eval function
* *ips_option::soid*: rule option to specify a shared object rule ID
* *ips_option::ssl_state*: detection option for ssl state
* *ips_option::ssl_version*: detection option for ssl version
* *ips_option::stream_reassemble*: detection option for stream reassembly control
* *ips_option::stream_size*: detection option for stream size checking
* *ips_option::tag*: rule option to log additional packets
* *ips_option::target*: rule option to indicate target of attack
* *ips_option::tos*: rule option to check type of service field
* *ips_option::ttl*: rule option to check time to live field
* *ips_option::window*: rule option to check TCP window field
* *logger::alert_csv*: output event in csv format
* *logger::alert_fast*: output event with brief text format
* *logger::alert_full*: output event with full packet dump
* *logger::alert_json*: output event in json format
* *logger::alert_sfsocket*: output event over socket
* *logger::alert_syslog*: output event to syslog
* *logger::alert_talos*: output event in Talos alert format
* *logger::alert_unixsock*: output event over unix socket
* *logger::log_codecs*: log protocols in packet by layer
* *logger::log_hext*: output payload suitable for daq hext
* *logger::log_pcap*: log packet in pcap format
* *logger::unified2*: output event and packet in unified2 format file
* *search_engine::ac_banded*: Aho-Corasick Banded (high memory, moderate performance)
* *search_engine::ac_bnfa*: Aho-Corasick Binary NFA (low memory, high performance) MPSE
* *search_engine::ac_full*: Aho-Corasick Full (high memory, best performance), implements search_all()
* *search_engine::ac_sparse*: Aho-Corasick Sparse (high memory, moderate performance) MPSE
* *search_engine::ac_sparse_bands*: Aho-Corasick Sparse-Banded (high memory, moderate performance) MPSE
* *search_engine::ac_std*: Aho-Corasick Full (high memory, best performance) MPSE
